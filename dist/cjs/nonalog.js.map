{
  "version": 3,
  "sources": ["../../main.js"],
  "sourcesContent": ["// logger\n\nimport { pid } from 'node:process'\nimport { format } from 'util'\n\nconst STYLE = {\n  reset: '\\x1b[0m',\n  bold: '\\x1b[1m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m'\n}\n\nconst getColor = (type) => {\n  const conf = {\n    debug: STYLE.cyan,\n    error: STYLE.red,\n    trace: STYLE.yellow\n  }\n  return conf[type]\n}\n\nconst createLogLine = (args, namespace, separator, type) => {\n  const parts = [pid]\n\n  parts.push(`${STYLE.green}${(new Date()).toISOString()}${STYLE.reset}`)\n\n  const namespaces = [...new Set(namespace.split(':').filter(ns => ns !== ''))]\n  if (namespaces.length > 0) {\n    parts.push(`${STYLE.bold}${STYLE.magenta}${namespaces.join(separator)}${STYLE.reset}`)\n  }\n\n  parts.push(`${STYLE.bold}${getColor(type)}${type.toUpperCase()}${STYLE.reset}`)\n\n  const msg = args.map((item) => {\n    return format(item)\n  }).join(' ')\n  parts.push(`${getColor(type)}${msg}${STYLE.reset}`)\n\n  return parts.join(' | ')\n}\n\nconst event = {\n  debug: [],\n  error: [],\n  trace: []\n}\n\nexport const onDebug = (fn) => {\n  event.debug.push(fn)\n}\n\nexport const onError = (fn) => {\n  event.error.push(fn)\n}\n\nexport const onTrace = (fn) => {\n  event.trace.push(fn)\n}\n\nconst triggerEvent = (evt, message) => {\n  event[evt].forEach((fn) => {\n    fn(message)\n  })\n}\n\nconst _debug = (args, namespace, options) => {\n  const { print = true, event = false, separator = ' / ' } = options\n  const txt = createLogLine(args, namespace, separator, 'debug')\n  if (print) console.debug(txt)\n  if (event) triggerEvent('debug', txt)\n  return txt\n}\n\nconst _error = (args, namespace, options) => {\n  const { print = true, event = false, separator = ' / ' } = options\n  const txt = createLogLine(args, namespace, separator, 'error')\n  if (print) console.error(txt)\n  if (event) triggerEvent('error', txt)\n  return txt\n}\n\nconst _trace = (args, namespace, options) => {\n  const { print = true, event = false, separator = ' / ' } = options\n  const txt = createLogLine(args, namespace, separator, 'trace')\n  if (print) {\n    console.log('-'.repeat(80))\n    console.trace(txt)\n    console.log('-'.repeat(80))\n  }\n  if (event) triggerEvent('trace', txt)\n  return txt\n}\n\nexport const logger = (namespace = '', options = {}) => {\n  const { enable = true } = options\n  const instance = {\n    debug: (...args) => {\n      return args.length ? enable && _debug(args, namespace, options) : null\n    },\n    error: (...args) => {\n      return args.length ? enable && _error(args, namespace, options) : null\n    },\n    trace: (...args) => {\n      return args.length ? enable && _trace(args, namespace, options) : null\n    },\n    branch: (name, opts = {}) => {\n      return logger(`${namespace}:${name}`, opts)\n    }\n  }\n  return instance\n}\n\nconst defaultLogger = logger()\n\nexport const debug = defaultLogger.debug\nexport const error = defaultLogger.error\nexport const trace = defaultLogger.trace\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "debug", "error", "logger", "onDebug", "onError", "onTrace", "trace", "__toCommonJS", "import_node_process", "import_util", "STYLE", "getColor", "type", "createLogLine", "args", "namespace", "separator", "parts", "namespaces", "ns", "msg", "item", "event", "fn", "triggerEvent", "evt", "message", "_debug", "options", "print", "txt", "_error", "_trace", "enable", "name", "opts", "defaultLogger"]
}
